# region API KEY
import telebot
from telebot import types
import time


bot = telebot.TeleBot('5791614763:AAH2G2i8tccHGsw9PvVuwD-EdNKroYy_2Hk')
# real 5791614763:AAH2G2i8tccHGsw9PvVuwD-EdNKroYy_2Hk
# test 5734914555:AAEPdNUsCpv4n49jie8C9P7TojK_McPkCIU
# endregion API KEY

# üëâ üôè üëÜ üëá üòÖ üëã üôå ‚ò∫Ô∏è ‚ùó Ô∏è‚ÄºÔ∏è ‚úåÔ∏è üëå ‚úä üë®‚Äçüíª  ü§ñ üòâ  ‚òùÔ∏è ‚ù§Ô∏è üí™ ‚úçÔ∏è üéØ  ‚õî  Ô∏è‚úÖ üìäüìàüßÆ   üó≥Ô∏è
Alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'

# region –∫–æ–º–∞–Ω–¥–∞ HI
@bot.message_handler(commands=['hi'])
def hi(message):
    if message.chat.id == 1891281816:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        btn1 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω ‚úÖ')
        markup.add(btn1)
        bot.send_message(1208542295, '–ü—Ä–∏–≤–µ—Ç, –°–∞—à–∞. –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º!', reply_markup=markup)

    elif message.chat.id == 1208542295:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        btn1 = types.KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω ‚úÖ')
        markup.add(btn1)
        bot.send_message(1891281816, '–ü—Ä–∏–≤–µ—Ç, –ò–ª—å—è. –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º!', reply_markup=markup)
# endregion –∫–æ–º–∞–Ω–¥–∞ HI

# region –ö–æ–º–∞–Ω–¥–∞ START
@bot.message_handler(commands=['start'])
def start(message):
    ID = message.chat.id
    bot.send_message(message.chat.id, f'–í–∞—à user ID: `{ID}`', parse_mode='Markdown')

    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    message_text = f'–ü—Ä–∏–≤–µ—Ç *{first_name}*! –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞? –¢–≤–æ—è —Ñ–∞–º–∏–ª–∏—è _{last_name}_?\n\n' \
                   f'–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å—Å—ã–ª–∫–æ–π](https://t.me/ilandroxy).'


    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é')
    btn2 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é')
    btn3 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ K-—Ç—É—é')
    markup.add(btn1, btn2, btn3)


    bot.send_message(message.chat.id, message_text, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=markup)
# endregion –ö–æ–º–∞–Ω–¥–∞ START

@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip()


    # region –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é
    if get_message_bot == "–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n'
                                          '*[10-–Ω–æ–µ —á–∏—Å–ª–æ] [n-–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è]*', parse_mode='Markdown')

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            try:
                text_message = message.text
                M = [int(i) for i in text_message.split()]
                if len(M) == 2:
                    x = M[0]  # —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è n
                    n = M[1]  # —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è
                    RES = []
                    while x > 0:
                        RES.append(Alphabet[x % n])
                        x //= n
                    RES.reverse()
                    res_string = "".join(RES)

                    message_text = f"–ü–µ—Ä–µ–≤–µ–ª–∏ —á–∏—Å–ª–æ {M[0]} *–∏–∑ 10-–Ω–æ–π* –≤ *{n}-—É—é —Å–∏—Å—Ç–µ–º—É*\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: *{res_string}* –≤ {n}-–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è."
                    bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            except IndexError:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            except ZeroDivisionError:
                bot.send_message(message.chat.id, "–ù–∞ –Ω—É–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è, –ø–ª—é—Å –Ω—É–ª—å –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω—É–ª–µ–º!")
        bot.register_next_step_handler(message, message_input)
    # endregion –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é

    # region –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é
    elif get_message_bot == "–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é":
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n'
                                          '*[N-–Ω–æ–µ —á–∏—Å–ª–æ] [n-–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è]*', parse_mode='Markdown')

        @bot.message_handler(content_types=['text'])
        def message_input(message):
            try:
                text_message = message.text
                M = [i for i in text_message.split()]
                if len(M) == 2:
                    x = M[0]  # —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è n
                    n = int(M[1])  # —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è

                    r = int(x, n)

                    message_text = f"–ü–µ—Ä–µ–≤–µ–ª–∏ —á–∏—Å–ª–æ {M[0]} *–∏–∑ N-–Ω–æ–π* –≤ *{10}-—É—é —Å–∏—Å—Ç–µ–º—É*\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: *{r}* –≤ {10}-–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è."
                    bot.send_message(message.chat.id, message_text, parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            except IndexError:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            except ZeroDivisionError:
                bot.send_message(message.chat.id, "–ù–∞ –Ω—É–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è, –ø–ª—é—Å –Ω—É–ª—å –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω—É–ª–µ–º!")

        bot.register_next_step_handler(message, message_input)
    # endregion –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é


    elif get_message_bot == "–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ K-—Ç—É—é":
        bot.send_message(message.chat.id, '–ü–æ–∫–∞ —á—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!')
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã -------------------------------------------------------------------------------------

    # –ö–Ω–æ–ø–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω --------------------------------------------------------------------------------------------------
    elif get_message_bot == "–£–≤–µ–¥–æ–º–ª–µ–Ω ‚úÖ":
        if message.chat.id == 1891281816:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn1 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é')
            btn2 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é')
            btn3 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ K-—Ç—É—é')
            markup.add(btn1, btn2, btn3)
            bot.send_dice(1891281816, reply_markup=markup)
            bot.send_message(1208542295, '–í–∞—à –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–Ω—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')

        elif message.chat.id == 1208542295:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn1 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ 10-–Ω–æ–π –≤ N-–Ω—É—é')
            btn2 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ 10-–Ω—É—é')
            btn3 = types.KeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ N-–Ω–æ–π –≤ K-—Ç—É—é')
            markup.add(btn1, btn2, btn3)
            bot.send_dice(1208542295, reply_markup=markup)
            bot.send_message(1891281816, '–í–∞—à –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–Ω—è–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')
    # –ö–Ω–æ–ø–∫–∞ –£–≤–µ–¥–æ–º–ª–µ–Ω --------------------------------------------------------------------------------------------------




'''
@bot.callback_query_handler(func=lambda call: True)
def step(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    if call.data == '–ö–ª—é—á–°–æ–±—ã—Ç–∏—è':
        pass

@bot.message_handler(commands=['voice'])
def voice(message):

    @bot.message_handler(content_types=['text'])
    def message_input(message):
        text_message = message.text
        bot.send_message(message.chat.id, text_message)

    bot.register_next_step_handler(message, message_input)

@bot.message_handler(content_types=['text'])
def mess(message):
    get_message_bot = message.text.strip()

    if get_message_bot == "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä":
        pass
'''

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(e)





